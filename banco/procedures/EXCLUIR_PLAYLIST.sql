CREATE DEFINER=`dba`@`%` PROCEDURE `EXCLUIR_PLAYLIST`(IN  P_ID_PLAYLIST INT,
													  IN  P_ID_USUARIO  INT,
													  IN  P_COMMIT      CHAR(1),
													  OUT P_OK 	        CHAR(1),
													  OUT P_RETORNO     VARCHAR(2000))
BEGIN

DECLARE V_TEXTO    VARCHAR(2000);
DECLARE V_PLA_NOME VARCHAR(255);

CALL VALIDA_LOOKUP(P_ID_PLAYLIST, 'PLAYLIST', 'ID_PLAYLIST');

CALL VALIDA_LOOKUP(P_ID_USUARIO, 'USUARIO', 'ID_USUARIO');


   -- VALIDA SE PLAYLIST PERTENCE AO MESMO USUÁRIO
   SELECT P.PLA_NOME
	    INTO V_PLA_NOME
     FROM PLAYLIST P
	WHERE P.ID_USUARIO   = P_ID_USUARIO
	  AND P.ID_PLAYLIST  = P_ID_PLAYLIST;
      
 IF V_PLA_NOME IS NULL THEN
    CALL MSG_ERRO('PLAYLIST_NAO_PERTENCE_USUARIO', V_PLA_NOME, NULL, NULL, NULL, NULL);
	      -- A playlist :param1 não pertence ao seu usuário.
 END IF;
 
   -- VALIDA SE PLAY LIST FOI EXLUIDA
   SELECT COUNT(1)
	    INTO @V_COUNT
     FROM PLAYLIST P
	WHERE P.ID_PLAYLIST  = P_ID_PLAYLIST
      AND P.PLA_ATIVO	 = 0;
      
 IF  @V_COUNT > 0 THEN
    CALL MSG_ERRO('PLAYLIST_JA_EXCLUIDA', V_PLA_NOME, NULL, NULL, NULL, NULL);
	      -- A playlist :param1 já está ecluída.
 END IF;
   
    -- APAGA AS MUSICAS DA PLAYLIST
	DELETE FROM PLAYLIST_MUSICA 
	 WHERE ID_PLAYLIST = P_ID_PLAYLIST;
  
   -- ATUALIZA PLAYLIST PARA INATIVO
   UPDATE PLAYLIST P
	  SET P.PLA_ATIVO =  0 
	WHERE P.ID_PLAYLIST = P_ID_PLAYLIST;

SET V_TEXTO :=  MSG_SUCESSO('EXCLUIR_PLAYLIST', V_PLA_NOME, NULL, NULL, NULL, NULL);  
				-- A playlist :param1 foi excluída com sucesso.

SET P_OK      := 'S';
SET P_RETORNO := V_TEXTO;

IF IFNULL(P_COMMIT, 'N') = 'S'THEN
 COMMIT;
END IF;

END